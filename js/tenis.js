// Generated by CoffeeScript 1.7.1
(function() {
  var Aleman, Espanol, Figura, Frances, Ingles, LEFT, PELOTA_ACELERACION, PELOTA_FRICCION, PELOTA_VELOCIDAD_FINAL, Pelota, RAQUETA_ACELERACION, RAQUETA_FRICCION, RAQUETA_VELOCIDAD_FINAL, RIGHT, Raqueta, Tenis, TenisGame, game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RAQUETA_ACELERACION = 0.40;

  RAQUETA_VELOCIDAD_FINAL = 5;

  RAQUETA_FRICCION = 0.10;

  PELOTA_ACELERACION = 5;

  PELOTA_VELOCIDAD_FINAL = 5;

  PELOTA_FRICCION = 0;

  LEFT = 0;

  RIGHT = 1;

  Ingles = (function() {
    function Ingles() {}

    Ingles.prototype.getLove = function() {
      return "Love";
    };

    Ingles.prototype.getFifteen = function() {
      return "Fifteen";
    };

    Ingles.prototype.getThirty = function() {
      return "Thirty";
    };

    Ingles.prototype.getForty = function() {
      return "Forty";
    };

    Ingles.prototype.getAll = function() {
      return "-All";
    };

    Ingles.prototype.getDeuce = function() {
      return "Deuce";
    };

    Ingles.prototype.getAdvantage = function() {
      return "Advantage";
    };

    Ingles.prototype.getWin = function() {
      return "Win for ";
    };

    return Ingles;

  })();

  Espanol = (function() {
    function Espanol() {}

    Espanol.prototype.getLove = function() {
      return "Cero";
    };

    Espanol.prototype.getFifteen = function() {
      return "Quince";
    };

    Espanol.prototype.getThirty = function() {
      return "Treinta";
    };

    Espanol.prototype.getForty = function() {
      return "Cuarenta";
    };

    Espanol.prototype.getAll = function() {
      return "-Iguales";
    };

    Espanol.prototype.getDeuce = function() {
      return "Empate";
    };

    Espanol.prototype.getAdvantage = function() {
      return "Ventaja para ";
    };

    Espanol.prototype.getWin = function() {
      return "Gana ";
    };

    return Espanol;

  })();

  Aleman = (function() {
    function Aleman() {}

    Aleman.prototype.getLove = function() {
      return "Liebe";
    };

    Aleman.prototype.getFifteen = function() {
      return "Fünfzehn";
    };

    Aleman.prototype.getThirty = function() {
      return "Dreißig";
    };

    Aleman.prototype.getForty = function() {
      return "Vierzig";
    };

    Aleman.prototype.getAll = function() {
      return "-À";
    };

    Aleman.prototype.getDeuce = function() {
      return "Gleichstand";
    };

    Aleman.prototype.getAdvantage = function() {
      return "Gleichstand ";
    };

    Aleman.prototype.getWin = function() {
      return "Gewinnen ";
    };

    return Aleman;

  })();

  Frances = (function() {
    function Frances() {}

    Frances.prototype.getLove = function() {
      return "Zèro";
    };

    Frances.prototype.getFifteen = function() {
      return "Quinze";
    };

    Frances.prototype.getThirty = function() {
      return "Trente";
    };

    Frances.prototype.getForty = function() {
      return "Quarant";
    };

    Frances.prototype.getAll = function() {
      return "-À";
    };

    Frances.prototype.getDeuce = function() {
      return "Égalité";
    };

    Frances.prototype.getAdvantage = function() {
      return "Avantage ";
    };

    Frances.prototype.getWin = function() {
      return "Gagner ";
    };

    return Frances;

  })();

  Tenis = (function() {
    function Tenis(p1N, p2N) {
      this.p2 = 0;
      this.p1 = 0;
      this.p1N = p1N;
      this.p2N = p2N;
    }

    Tenis.prototype.wonPoint = function(playerName) {
      if (playerName === 1) {
        return this.p1 += 1;
      } else {
        return this.p2 += 1;
      }
    };

    Tenis.prototype.setPoint = function(playerName, point) {
      if (playerName === 1) {
        return this.p1 = point;
      } else {
        return this.p2 = point;
      }
    };

    Tenis.prototype.getPoint = function(player) {
      if (player === 1) {
        return this.p1;
      } else {
        return this.p2;
      }
    };

    Tenis.prototype.getScore = function() {
      var p, s;
      s = void 0;
      if ((this.p1 < 4 && this.p2 < 4) && (this.p1 + this.p2 < 6)) {
        p = [this.idioma.getLove(), this.idioma.getFifteen(), this.idioma.getThirty(), this.idioma.getForty()];
        s = p[this.p1];
        if (this.p1 === this.p2) {
          return s + this.idioma.getAll();
        } else {
          return s + "-" + p[this.p2];
        }
      } else {
        if (this.p1 === this.p2) {
          return this.idioma.getDeuce();
        }
        s = (this.p1 > this.p2 ? this.p1N : this.p2N);
        if ((this.p1 - this.p2) * (this.p1 - this.p2) === 1) {
          return this.idioma.getAdvantage() + s;
        } else {
          return this.idioma.getWin() + s;
        }
      }
    };

    Tenis.prototype.getName = function(player) {
      if (player === 1) {
        return this.p1N;
      } else {
        return this.p2N;
      }
    };

    Tenis.prototype.setIdioma = function(idioma) {
      return this.idioma = idioma;
    };

    Tenis.prototype.WinIdioma = function() {
      return this.idioma.getWin();
    };

    return Tenis;

  })();

  Figura = (function() {
    Figura.prototype.x = 0;

    Figura.prototype.y = 0;

    Figura.prototype.vx = 0;

    Figura.prototype.vy = 0;

    function Figura(context, maxX, maxY, minX, minY, offsetX, offsetY, a, tv, f) {
      this.context = context;
      this.maxX = maxX;
      this.maxY = maxY;
      this.minX = minX;
      this.minY = minY;
      this.offsetX = offsetX;
      this.offsetY = offsetY;
      this.a = a;
      this.tv = tv;
      this.f = f;
    }

    Figura.prototype.update = function() {
      if (this.vx > 0) {
        this.vx -= this.f;
      }
      if (this.vx < 0) {
        this.vx += this.f;
      }
      if (this.vy > 0) {
        this.vy -= this.f;
      }
      if (this.vy < 0) {
        this.vy += this.f;
      }
      if (this.vx > this.tv) {
        this.vx = this.tv;
      }
      if (this.vx < -this.tv) {
        this.vx = -this.tv;
      }
      if (this.vy > this.tv) {
        this.vy = this.tv;
      }
      if (this.vy < -this.tv) {
        this.vy = -this.tv;
      }
      this.x += this.vx;
      this.y += this.vy;
      return this.checkBoundary();
    };

    Figura.prototype.checkBoundary = function() {
      if (this.x + this.w > this.maxX) {
        this.x = this.maxX - this.w;
      }
      if (this.x < this.minX) {
        this.x = this.minX;
      }
      if (this.y + this.h > this.maxY) {
        this.y = this.maxY - this.h;
      }
      if (this.y < this.minY) {
        return this.y = this.minY;
      }
    };

    Figura.prototype.draw = function() {
      this.context.fillStyle = '#186AB6';
      return this.context.fillRect(this.x + this.offsetX, this.y + this.offsetY, this.w, this.h);
    };

    Figura.prototype.accelX = function() {
      return this.vx += this.a;
    };

    Figura.prototype.accelY = function() {
      return this.vy += this.a;
    };

    Figura.prototype.decelX = function() {
      return this.vx -= this.a;
    };

    Figura.prototype.decelY = function() {
      return this.vy -= this.a;
    };

    return Figura;

  })();

  Raqueta = (function(_super) {
    __extends(Raqueta, _super);

    function Raqueta() {
      return Raqueta.__super__.constructor.apply(this, arguments);
    }

    Raqueta.prototype.w = 20;

    Raqueta.prototype.h = 175;

    return Raqueta;

  })(Figura);

  Pelota = (function(_super) {
    __extends(Pelota, _super);

    function Pelota() {
      return Pelota.__super__.constructor.apply(this, arguments);
    }

    Pelota.prototype.w = 10;

    Pelota.prototype.h = 10;

    Pelota.prototype.x = 200;

    Pelota.prototype.y = 200;

    Pelota.prototype.winner = null;

    Pelota.prototype.checkWinner = function() {
      return this.winner;
    };

    Pelota.prototype.checkBoundary = function() {
      if (this.x + this.w > this.maxX) {
        this.winner = 1;
      }
      if (this.x < this.minX) {
        this.winner = 2;
      }
      if (this.y + this.h > this.maxY || this.y < this.minY) {
        return this.vy = -this.vy;
      }
    };

    Pelota.prototype.checkCollision = function(e, bat) {
      var ex, ey, x, y;
      x = this.x + this.offsetX;
      y = this.y + this.offsetY;
      ex = e.x + e.offsetX;
      ey = e.y + e.offsetY;
      if (y >= ey && y <= ey + e.h) {
        if (bat === LEFT && x < ex + e.w) {
          this.x += RAQUETA_VELOCIDAD_FINAL / 2;
          this.vx = -this.vx;
        }
        if (bat === RIGHT && x + this.w > ex) {
          this.x -= RAQUETA_VELOCIDAD_FINAL / 2;
          return this.vx = -this.vx;
        }
      }
    };

    Pelota.prototype.draw = function() {
      this.context.beginPath();
      this.context.fillStyle = 'rgba(0,0,0,0.8)';
      this.context.arc(this.x + this.offsetX, this.y + this.offsetY, 10, 0, Math.PI * 2);
      return this.context.fill();
    };

    return Pelota;

  })(Figura);

  TenisGame = (function() {
    function TenisGame() {}

    TenisGame.prototype.main = function() {
      this.createCanvas();
      this.addKeyObservers();
      return this.startNewGame();
    };

    TenisGame.prototype.startNewGame = function() {
      this.entities = [];
      this.entities.push(new Raqueta(this.context, this.canvas.width, this.canvas.height, 0, 0, 30, 0, RAQUETA_ACELERACION, RAQUETA_VELOCIDAD_FINAL, RAQUETA_FRICCION));
      this.entities.push(new Raqueta(this.context, this.canvas.width, this.canvas.height, 0, 0, this.canvas.width - 70, 0, RAQUETA_ACELERACION, RAQUETA_VELOCIDAD_FINAL, RAQUETA_FRICCION));
      this.entities.push(new Pelota(this.context, this.canvas.width, this.canvas.height, 0, 0, 0, 0, PELOTA_ACELERACION, PELOTA_VELOCIDAD_FINAL, PELOTA_FRICCION));
      this.entities[2].vx = 5;
      this.entities[2].vy = 5;
      return this.runLoop();
    };

    TenisGame.prototype.runLoop = function() {
      return setTimeout((function(_this) {
        return function() {
          var player;
          if (_this.aPressed) {
            _this.entities[0].decelY();
          }
          if (_this.zPressed) {
            _this.entities[0].accelY();
          }
          if (_this.upPressed) {
            _this.entities[1].decelY();
          }
          if (_this.downPressed) {
            _this.entities[1].accelY();
          }
          _this.entities.forEach(function(e) {
            return e.update();
          });
          _this.entities[2].checkCollision(_this.entities[0], LEFT);
          _this.entities[2].checkCollision(_this.entities[1], RIGHT);
          player = _this.entities[2].checkWinner();
          if (player) {
            _this.terminateRunLoop = true;
            _this.tenis.wonPoint(player);
            _this.notifyScore("<h1 class='animated tada'>" + (_this.tenis.getScore()) + "</h1>");
            _this.notifyStatus("" + (_this.tenis.getName(player)) + " gana el Set! Nuevo juego en 3 segundos.");
            _this.addRow();
            setTimeout(function() {
              _this.notifyStatus('');
              _this.terminateRunLoop = _this.getWinIdioma(_this.tenis.getScore());
              return _this.startNewGame();
            }, 3000);
          }
          _this.clearCanvas();
          _this.entities.forEach(function(e) {
            return e.draw();
          });
          if (!_this.terminateRunLoop) {
            return _this.runLoop();
          }
        };
      })(this), 10);
    };

    TenisGame.prototype.notifyStatus = function(message) {
      return $('#message').html(message);
    };

    TenisGame.prototype.notifyScore = function(message) {
      return $('#score').html(message);
    };

    TenisGame.prototype.cleanup = function() {
      this.terminateRunLoop = true;
      return this.clearCanvas();
    };

    TenisGame.prototype.createCanvas = function() {
      this.canvas = document.getElementById('canvas');
      this.context = this.canvas.getContext('2d');
      this.canvas.width = 1100;
      return this.canvas.height = 400;
    };

    TenisGame.prototype.createTenis = function(p1N, p2N) {
      return this.tenis = new Tenis(p1N, p2N);
    };

    TenisGame.prototype.setIdiomaTenis = function(idioma) {
      return this.tenis.setIdioma(idioma);
    };

    TenisGame.prototype.setPointGame = function(player, puntos) {
      return this.tenis.setPoint(player, puntos);
    };

    TenisGame.prototype.addRow = function() {
      return $('#table-marcador tbody').append("<tr><td class='pj1'>" + (this.tenis.getPoint(1)) + "</td><td class='pj2'>" + (this.tenis.getPoint(2)) + "</td><td>" + (this.tenis.getScore()) + "</td><td><a href='#' class='btn btn-danger eliminar-row'>Borrar</a></td></tr>");
    };

    TenisGame.prototype.getWinIdioma = function(marcador) {
      var i, x;
      i = this.tenis.WinIdioma() + this.tenis.getName(1);
      x = this.tenis.WinIdioma() + this.tenis.getName(2);
      if (i === marcador || x === marcador) {
        return true;
      } else {
        return false;
      }
    };

    TenisGame.prototype.clearCanvas = function() {
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    TenisGame.prototype.addKeyObservers = function() {
      document.addEventListener('keydown', (function(_this) {
        return function(e) {
          switch (e.keyCode) {
            case 40:
              return _this.downPressed = true;
            case 38:
              return _this.upPressed = true;
            case 90:
              return _this.zPressed = true;
            case 65:
              return _this.aPressed = true;
          }
        };
      })(this), false);
      return document.addEventListener('keyup', (function(_this) {
        return function(e) {
          switch (e.keyCode) {
            case 27:
              return _this.cleanup();
            case 40:
              return _this.downPressed = false;
            case 38:
              return _this.upPressed = false;
            case 90:
              return _this.zPressed = false;
            case 65:
              return _this.aPressed = false;
          }
        };
      })(this), false);
    };

    return TenisGame;

  })();

  game = new TenisGame;

  $('#btn-iniciar').click(function() {
    var nombre_j1, nombre_j2, num_idioma;
    nombre_j1 = $('#nombre_j1').val();
    nombre_j2 = $('#nombre_j2').val();
    num_idioma = parseInt($('#idioma').val(), 10);
    if (nombre_j1 && nombre_j2 && num_idioma) {
      game.createTenis(nombre_j1, nombre_j2);
      switch (num_idioma) {
        case 1:
          game.setIdiomaTenis(new Ingles);
          break;
        case 2:
          game.setIdiomaTenis(new Espanol);
          break;
        case 3:
          game.setIdiomaTenis(new Aleman);
          break;
        case 4:
          game.setIdiomaTenis(new Frances);
      }
      return setTimeout(function() {
        game.main();
        $('#table-marcador #j1').html(nombre_j1);
        $('#table-marcador #j2').html(nombre_j2);
        return $('#table-marcador').show();
      }, 1500);
    } else {
      return alert('Rellena todos los campos');
    }
  });

  $('#table-marcador').on('click', '.eliminar-row', function(e) {
    var pj1, pj2;
    e.preventDefault();
    pj1 = parseInt($(this).closest('tr').find('.pj1').text(), 10);
    pj2 = parseInt($(this).closest('tr').find('.pj2').text(), 10);
    game.setPointGame(1, pj1);
    game.setPointGame(2, pj2);
    game.main();
    return $(this).closest('tr').nextAll('tr').remove();
  });

}).call(this);
